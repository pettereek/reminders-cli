#compdef reminders

_get_lists() {
  _lists=($(reminders lists --completion 2> /dev/null))
  echo $_lists
}

_reminders_add() {
  _message "reminder content"
}
_reminders_done() {
  _message "the index"
}
_reminders_rm() {
  _message "the index"
}
_reminders_ls() {
  _message "list reminders"
}

_reminders_lists() {
  _arguments '--with-ids[show list ids]'
}

_reminders_use() {
  if [[ ${#words[@]} -eq 2 ]]; then
    lists=($(_get_lists))
    # no use in continuing if we got no lists to suggest
    if [[ $lists != "" ]]; then
      # we'll get the lists separated by the sequence '%%%' and must
      # keep the leading words around to allow multi-word list names
      MEM=()
      for li in "${lists[@]}"
      do
        if [[ $li != *"%%%" ]] then
          # if this item did not end with the separator, just add it
          # to MEM and take the next
          MEM+=($li)
          continue
        fi
        # remove trailing '%%%'
        lli=${li%"%%%"}
        if [[ ${#MEM[@]} -eq 0 ]]; then
          # cannot always add 'MEM ' since that would cause an
          # unintentional extra leading whitespace
          compadd $lli
        else
          compadd "$MEM $lli" # join MEM and lli
        fi
        MEM=() # reset
      done
    fi
  fi
}

if (( CURRENT > 2 )); then
  (( CURRENT-- ))
  shift words
  _call_function - _reminders_${words[1]}
  return
else
  local -a _reminders_commands
  _reminders_commands=(
  'ls:list reminders'
  'done:complete a reminder'
  'add:add a reminder'
  'rm:remove a reminder'
  'use:set the current list'
  'lists:show all reminders lists'
  )
  _describe -t commands 'commands' _reminders_commands && ret=0
fi
# vim:ft=zsh:ts=2
